package familycommandcenter.model;

import javax.sql.DataSource;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;

/**
 * Thin DAO for the <code>users</code> table.
 * Handles create, lookup by username / role / household.
 */
public final class UserDAO {

    private final DataSource ds;

    public UserDAO(DataSource ds) {
        this.ds = ds;
    }

    /* ─────────────────────────── inserts ─────────────────────────── */

    /**
     * Insert a new user row.
     * <p>
     * Column mapping: id (serial) is generated by PostgreSQL.
     * </p>
     */
    public void save(User u) throws SQLException {
        final String sql = """
                    INSERT INTO users
                           (username, password_hash, age,
                            role, created_at, household_id)
                    VALUES (?,?,?,?,?,?)
                """;

        try (Connection c = ds.getConnection();
                PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setString(1, u.getUsername());
            ps.setString(2, u.getPasswordHash());
            ps.setInt(3, u.getAge());
            ps.setString(4, u.getRole());

            LocalDateTime ts = (u.getCreatedAt() != null)
                    ? u.getCreatedAt()
                    : LocalDateTime.now();
            ps.setTimestamp(5, Timestamp.valueOf(ts));

            ps.setObject(6, u.getHouseholdId(), java.sql.Types.OTHER);
            ps.executeUpdate();
        }
    }

    /* ────────────────────────── look-ups ─────────────────────────── */

    public Optional<User> findByUsername(String username) throws SQLException {
        final String sql = "SELECT * FROM users WHERE username = ?";

        try (Connection c = ds.getConnection();
                PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() ? Optional.of(map(rs)) : Optional.empty();
            }
        }
    }

    public List<User> getUsersByRole(String role) throws SQLException {
        final String sql = "SELECT * FROM users WHERE role = ?";
        try (Connection c = ds.getConnection();
                PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setString(1, role);
            try (ResultSet rs = ps.executeQuery()) {
                List<User> list = new ArrayList<>();
                while (rs.next())
                    list.add(map(rs));
                return list;
            }
        }
    }

    public List<User> getKidsByHousehold(UUID householdId) throws SQLException {
        final String sql = """
                    SELECT * FROM users
                     WHERE household_id = ?
                       AND role          = 'kid'
                """;
        try (Connection c = ds.getConnection();
                PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setObject(1, householdId, Types.OTHER);
            try (ResultSet rs = ps.executeQuery()) {
                List<User> list = new ArrayList<>();
                while (rs.next())
                    list.add(map(rs));
                return list;
            }
        }
    }

    public List<User> findAll() throws SQLException {
        final String sql = "SELECT * FROM users";
        try (Connection c = ds.getConnection();
                PreparedStatement ps = c.prepareStatement(sql);
                ResultSet rs = ps.executeQuery()) {

            List<User> list = new ArrayList<>();
            while (rs.next())
                list.add(map(rs));
            return list;
        }
    }

    /* ───────────────────────── utilities ────────────────────────── */

    private User map(ResultSet rs) throws SQLException {
        return new User(
                rs.getInt("id"),
                rs.getString("username"),
                rs.getString("password_hash"),
                rs.getTimestamp("created_at").toLocalDateTime(),
                rs.getInt("age"),
                rs.getString("role"),
                rs.getObject("household_id", UUID.class));
    }
}
