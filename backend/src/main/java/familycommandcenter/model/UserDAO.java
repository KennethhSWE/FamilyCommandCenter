package familycommandcenter.model;

import javax.sql.DataSource;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/** CRUD helper for the <code>users</code> table. */
public class UserDAO {

    /* ──────────────────────────────── FIELDS ──────────────────────────────── */
    private final DataSource dataSource;

    public UserDAO(DataSource ds) {
        this.dataSource = ds;
    }

    /* ────────────────────────────── INSERT / SAVE ─────────────────────────── */

    /**
     * Persist a complete {@link User} row.
     * The {@code id} column is auto-generated by PostgreSQL.
     */
    public void save(User u) throws SQLException {
        final String sql = """
            INSERT INTO users (username, password_hash, age, role, created_at)
            VALUES (?,?,?,?,?)
            """;

        try (Connection conn = dataSource.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString   (1, u.getUsername());
            ps.setString   (2, u.getPasswordHash());
            ps.setInt      (3, u.getAge());
            ps.setString   (4, u.getRole());
           
            // If CreatedAt is null use the now time instead. 
            LocalDateTime ts = (u.getCreatedAt() != null)
                                ? u.getCreatedAt()
                                : LocalDateTime.now();
            ps.setTimestamp(5, Timestamp.valueOf(ts));
            
            ps.executeUpdate();
        }
    }

    /*  Convenience wrappers so older code (App.java etc.) compiles unchanged  */

    public boolean registerUser(User u) {
        try { save(u); return true; }
        catch (SQLException ex) {
            System.err.println("Error registering user: " + ex.getMessage());
            return false;
        }
    }

    public boolean registerUser(User u, String role) {
        u.setRole(role);
        return registerUser(u);
    }

    /* ───────────────────────────────── QUERIES ────────────────────────────── */

    public Optional<User> findByUsername(String username) throws SQLException {
        final String sql = "SELECT * FROM users WHERE username = ?";

        try (Connection conn = dataSource.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            return rs.next() ? Optional.of(map(rs)) : Optional.empty();
        }
    }

    public List<User> getUsersByRole(String role) throws SQLException {
        final String sql = "SELECT * FROM users WHERE role = ?";
        List<User> list = new ArrayList<>();

        try (Connection conn = dataSource.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, role);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) list.add(map(rs));
        }
        return list;
    }

    public List<User> findAll() throws SQLException {
        final String sql = "SELECT * FROM users";
        List<User> list = new ArrayList<>();

        try (Connection conn = dataSource.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) list.add(map(rs));
        }
        return list;
    }

    /* ────────────────────────── RESULT-SET → OBJECT ───────────────────────── */

    private User map(ResultSet rs) throws SQLException {
        return new User(
                rs.getInt("id"),
                rs.getString("username"),
                rs.getString("password_hash"),
                rs.getTimestamp("created_at").toLocalDateTime(),
                rs.getInt("age"),
                rs.getString("role"));
    }
}
